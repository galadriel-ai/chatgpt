import datetime
from typing import Optional

from sqlalchemy import Boolean
from sqlalchemy import Column
from sqlalchemy import DateTime
from sqlalchemy import Integer
from sqlalchemy import JSON
from sqlalchemy import String

from sqlalchemy import ForeignKey
from sqlalchemy import ARRAY
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker
from uuid_extensions import uuid7

engine = None
session_maker: Optional[sessionmaker] = None

Base = declarative_base()


class UserProfile(Base):
    __tablename__ = "user_profile"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    email = Column(String(), nullable=False)
    name = Column(String(), nullable=True)
    profile_picture = Column(String(), nullable=True)
    auth_provider = Column(String(), nullable=False)
    provider_id = Column(String(), nullable=False)
    is_email_verified = Column(Boolean(), nullable=False, default=False)
    last_login_at = Column(DateTime(), nullable=False)

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class ChatConfiguration(Base):
    __tablename__ = "chat_configuration"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    user_profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UserProfile.id),
        nullable=True,
    )
    user_name = Column(String(), nullable=False)
    ai_name = Column(String(), nullable=False)
    description = Column(String(), nullable=False)
    role = Column(String(), nullable=False)

    # TODO: profile picture URL, files

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class ChatConfigurationSummary(Base):
    __tablename__ = "chat_configuration_summary"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    chat_configuration_id = Column(
        UUID(as_uuid=True),
        ForeignKey(ChatConfiguration.id),
        unique=True,
        nullable=False,
    )
    summary = Column(String(), nullable=False)
    last_summarized_at = Column(DateTime, nullable=False)

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class Chat(Base):
    __tablename__ = "chat"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    user_profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UserProfile.id),
        nullable=False,
    )
    chat_configuration_id = Column(
        UUID(as_uuid=True),
        ForeignKey(ChatConfiguration.id),
        nullable=True,
    )
    title = Column(String(), nullable=False)

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class Message(Base):
    __tablename__ = "message"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    chat_id = Column(
        UUID(as_uuid=True),
        ForeignKey(Chat.id),
        nullable=False,
    )
    sequence_number = Column(Integer, nullable=False)
    role = Column(String(), nullable=False)
    content = Column(String(), nullable=True)
    model = Column(String(), nullable=True)
    image_url = Column(String(), nullable=True)
    attachment_ids = Column(
        ARRAY(UUID(as_uuid=True)),
        nullable=False,
        default=list,
    )

    # Tool message fields
    tool_call_id = Column(String(), nullable=True)
    tool_name = Column(String(), nullable=True)

    # Tool call fields
    tool_calls = Column(String(), nullable=True)

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class File(Base):
    __tablename__ = "file"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    user_profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UserProfile.id),
        nullable=False,
    )
    filename = Column(String(), nullable=False)
    full_path = Column(String(), nullable=False)
    content_type = Column(String(), nullable=False)
    size = Column(Integer(), nullable=False)
    deleted = Column(Boolean(), nullable=False, default=False)

    # Autogenerated
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )


class Generation(Base):
    __tablename__ = "generation"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid7)
    user_profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey(UserProfile.id),
        nullable=False,
    )
    chat_id = Column(
        UUID(as_uuid=True),
        ForeignKey(Chat.id),
        nullable=True,
    )
    type = Column(String(), nullable=False)
    prompt = Column(String(), nullable=False)
    status = Column(String(), nullable=False)
    url = Column(String(), nullable=True)
    data = Column(JSON(), nullable=False, default={})
    created_at = Column(DateTime, nullable=False)
    last_updated_at = Column(
        DateTime, default=datetime.datetime.now(datetime.UTC), nullable=False
    )
